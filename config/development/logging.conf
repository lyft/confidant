version: 1

# gunicorn configures python logging *after* its own logger have been
# created. Disabling existing loggers (the default) will overwrite (ie delete)
# gunicorn loggers. access and errors logs will no longer work.
disable_existing_loggers: false

root:
  level: DEBUG
  handlers:
    - console_stdout

loggers:
  gunicorn.error:
    # Don't log debug messages given that it pollutes the log with useless
    # "Closing Connection" messages when the root logger level is set to
    # DEBUG (eg in development).
    level: INFO
    propagate: True
    handlers:
    - console_stderr
  gunicorn.access:
    level: WARN
    # Don't propagate messages given that we'll log access log messages once
    # to the access.log file. When a logger doesn't propagate make sure to
    # set relevant handlers.
    propagate: False
  # reduce logging noise from various libraries
  requests.packages.urllib3.connectionpool:
    level: WARN
    propagate: True
  urllib3.connectionpool:
    level: WARN
    propagate: True
  boto:
    level: WARN
    propagate: True
  boto3:
    level: WARN
    propagate: True
  botocore:
    level: WARN
    propagate: True

handlers:
  console_stdout:
    class: logging.StreamHandler
    formatter: json
    stream: 'ext://sys.stdout'
  console_stderr:
    class: logging.StreamHandler
    formatter: json
    stream: 'ext://sys.stderr'
  # access_file handler is commented out to keep it from being instantiated.
  # uncomment and add to gunicorn.access handlers to enable gunicorn access logs.
  #
  #  access_file:
  #    class: logging.FileHandler
  #    filename: '/var/log/confidant-web-access.log'

formatters:
  json:
    class: pythonjsonlogger.jsonlogger.JsonFormatter
    format: 'ts=%(asctime)s name=%(name)s lvlname=%(levelname)s msg=%(message)s'
