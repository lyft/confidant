# -*- Python -*-
import blinker
import os
import random

from gunicorn.config import make_settings, validate_callable, Setting
import resource
from six import itervalues
from six.moves import xrange as range
from six.moves import zip_longest
from uuid import UUID

try:
    import gunicorn.workers.ggevent
except RuntimeError:
    # ggevent throws a RuntimeError if gevent is not installed
    GEVENT_WORKER_AVAILABLE = False
else:
    GEVENT_WORKER_AVAILABLE = True

# Set this lazily to avoid accidentally importing flask before gevent patch
FLASK_ENDPOINT_TIMING_AVAILABLE = None

# default to 30s, similar gunicorn default 30s for worker timeout
GEVENT_REQUEST_TIMEOUT_MS_DEFAULT = 30 * 1000
GEVENT_REQUEST_TIMEOUT_MS = int(os.environ.get('GEVENT_REQUEST_TIMEOUT_MS', GEVENT_REQUEST_TIMEOUT_MS_DEFAULT))

MAXFD = 1024

# Access log format:
# [time] "request" status bytes_received bytes_sent microsecond_response_time "X-Forwarded-For_header" "User-Agent_header" remote_user_header "unique_id" "Accept_header"
# Use quotes (") for values that may have space in them (eg headers). Gunicorn
# will automatically escape any quotes in the value:
#     "my-user-agent-\"-with-quote"
#
access_log_format  = '%(t)s "%(r)s" %(s)s %({Content-Length}i)s %(b)s %(D)s "%({X-Forwarded-For}i)s" "%(a)s" %(u)s "%({X-Request-Id}i)s" "%({Accept}i)s"'
with open("/etc/confidant/logging.conf", "r") as fd:
    import os.path
    import yaml

    logconfig_dict = yaml.safe_load(os.path.expandvars(fd.read()))

keepalive = 0
max_requests = 1000000
max_requests_jitter = 2
try:
    os.mkdir('/run/gunicorn')
except FileExistsError:
    pass
bind = ['0.0.0.0:80']
reload = False
# Put gunicorn healthchecks onto tmpfs so we don't block on EBS-only hosts
worker_tmp_dir = "/run/gunicorn"
# Set the sleep time between spawning of workers to be a minimum of 1 second
spawn_worker_sleep_time = 1.0


# Gunicorn hooks provide the ability to add extra functionality at
# specific points in the lifecycle of a request or the server. The
# Blinker library is used as a signaling mechanism, so integrating
# with your application requires importing this library then
# connecting your code to the appropriate signal. Signal handlers
# accept a single sender positional argument and a set of kwargs that
# matches the respective gunicorn callback arguments.  Examples of
# this can be found in this file for the default behavior used for all
# applications.
#
# Custom signal handlers for your service should be added to a
# gunicorn_hooks module.
#
# Warning: there is no guarantee for the order in which signals get
# processed so if you require this functionality then all
# order-dependent logic should be wrapped into a single callback.
#
# More info:
# - http://docs.gunicorn.org/en/stable/settings.html#server-hooks
# - https://pythonhosted.org/blinker/
class ServerSignals(object):
    def __init__(self, settings, delete=True):
        self._settings = settings
        self.allocate(delete)
        self.wrap_hooks()

    def allocate(self, delete):
        for setting in itervalues(self._settings):
            if (isinstance(setting, Setting) and
                    callable(getattr(setting, 'default', ''))):
                # disable inspection of callback arguments
                cls = setting.__class__
                cls.validator = staticmethod(validate_callable(-1))
                hook = setting.default.__code__.co_name
                # delete signal if it already exists, so we don't add
                # a connect per execfile of gunicorn.conf on HUP
                signal_name = 'gunicorn_hook.{}'.format(hook)
                if delete:
                    blinker.signal.__self__.pop(signal_name, None)
                # create signal and attach it
                setattr(self, hook, blinker.signal(signal_name))

    @staticmethod
    def make_signal(func):
        s = blinker.signal('gunicorn_hook.{}'.format(func.__code__.co_name))
        arg_names = func.__code__.co_varnames

        def func_wrapper(*args, **kwargs):
            if s.receivers:
                # turn all arguments into kwargs for signal send
                s_kwargs = dict(zip_longest(arg_names, args))
                s_kwargs.update(kwargs)
                s.send('gunicorn', **s_kwargs)
        return func_wrapper

    def wrap_hooks(self):
        namespace = globals()
        for setting in itervalues(self._settings):
            if (isinstance(setting, Setting) and
                    callable(getattr(setting, 'default', ''))):
                fn = setting.default
                namespace[fn.__code__.co_name] = self.make_signal(fn)

    @staticmethod
    def any_sender(func):
        def func_wrapper(sender, *args, **kwargs):
            return func(*args, **kwargs)
        return func_wrapper

# setup our gunicorn server hook signals
global server_hooks
server_hooks = ServerSignals(make_settings())


class GeventWorkerTimeoutException(Exception):
    """
    By default, gevent timeouts throw an exception that extends from BaseException and is not
    handled properly by gunicorn (no 500 returned to client, no access log). Extending from Exception rather
    than BaseException fixes that. Defining a custom exception also helps with readability in the log.

    """
    pass

def get_maxfd():
    maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
    if (maxfd == resource.RLIM_INFINITY):
        maxfd = MAXFD
    return maxfd


@server_hooks.pre_request.connect
@server_hooks.any_sender
def set_request_timeout(worker, req):
    if GEVENT_WORKER_AVAILABLE and isinstance(worker, gunicorn.workers.ggevent.GeventWorker):
        # timeout will be caught as an unhandled exception, gunicorn will return and log a 500
        timeout_sec = GEVENT_REQUEST_TIMEOUT_MS / float(1000)
        req._timeout = gunicorn.workers.ggevent.gevent.Timeout(
            seconds=timeout_sec,
            exception=GeventWorkerTimeoutException('{} seconds'.format(timeout_sec))
        )
        req._timeout.start()

@server_hooks.post_request.connect
@server_hooks.any_sender
def cancel_request_timeout(worker, req, environ, resp):
    if GEVENT_WORKER_AVAILABLE and getattr(req, '_timeout', None):
        req._timeout.cancel()

# Generate a unique request id if a X-Request-ID header doesn't exist.
@server_hooks.pre_request.connect
@server_hooks.any_sender
def pre_request_add_request_id(worker, req):
    for h in req.headers:
        # all request header name are upper cased in a gunicorn request.
        if 'X-REQUEST-ID' == h[0]:
            # There is a X-Request-ID header set. Don't set our own.
            return
    # We haven't found a request-id header. Add one with our own
    # generated request id. UUID4 implementation is backported from
    # Python 3.5 and avoids calling into libuuid.  See also:
    # https://bugs.python.org/issue25515
    req.headers.append(('X-REQUEST-ID', str(UUID(bytes=os.urandom(16), version=4))))
